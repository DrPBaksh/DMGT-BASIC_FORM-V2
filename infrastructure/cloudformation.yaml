AWSTemplateFormatVersion: '2010-09-09'
Description: 'DMGT Data & AI Readiness Assessment Form - Enterprise AWS Infrastructure (v2)'

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, prod]
    Description: Environment name for resource naming and configuration.
  
  BucketPrefix:
    Type: String
    Description: A unique prefix for creating S3 bucket names.
    Default: dmgt-assessment

Resources:
  # S3 Bucket for Lambda Function Code
  # This bucket stores the zipped code for all Lambda functions.
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketPrefix}-lambda-code-${AWS::AccountId}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket for the static website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketPrefix}-website-${AWS::AccountId}-${Environment}'
      # Public access is blocked. Access is granted only via CloudFront OAI.
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html # For SPA routing
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket Policy to allow CloudFront to access the website content
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # S3 Bucket for storing editable JSON question configurations
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketPrefix}-config-${AWS::AccountId}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket for storing user assessment responses
  ResponsesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketPrefix}-responses-${AWS::AccountId}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket for storing user-uploaded files
  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketPrefix}-files-${AWS::AccountId}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # CloudFront Origin Access Identity (OAI)
  # Allows CloudFront to securely access private S3 bucket content.
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${Environment} assessment form'

  # CloudFront Distribution for fast, secure content delivery
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'DMGT Assessment Form - ${Environment}'
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        PriceClass: PriceClass_100
        Origins:
          - Id: S3WebsiteOrigin
            DomainName: !GetAtt WebsiteBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        DefaultCacheBehavior:
          TargetOriginId: S3WebsiteOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies: { Forward: none }
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        # Custom Error Response to handle client-side routing for the SPA
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  # IAM Role for Lambda functions execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'dmgt-assessment-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [s3:GetObject, s3:PutObject, s3:DeleteObject]
                Resource:
                  - !Sub 'arn:aws:s3:::${ConfigBucket}/*'
                  - !Sub 'arn:aws:s3:::${ResponsesBucket}/*'
                  - !Sub 'arn:aws:s3:::${FilesBucket}/*'

  # Lambda Functions (Code is sourced from S3)
  GetQuestionsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'dmgt-assessment-get-questions-${Environment}'
      Handler: get_questions.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'lambda_package.zip'
      Environment:
        Variables:
          CONFIG_BUCKET: !Ref ConfigBucket

  SaveResponseFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'dmgt-assessment-save-response-${Environment}'
      Handler: save_response.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'lambda_package.zip'
      Environment:
        Variables:
          RESPONSES_BUCKET: !Ref ResponsesBucket

  GetResponseFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'dmgt-assessment-get-response-${Environment}'
      Handler: get_response.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'lambda_package.zip'
      Environment:
        Variables:
          RESPONSES_BUCKET: !Ref ResponsesBucket

  FileUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'dmgt-assessment-file-upload-${Environment}'
      Handler: file_upload.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 512
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'lambda_package.zip'
      Environment:
        Variables:
          FILES_BUCKET: !Ref FilesBucket

  # API Gateway to expose Lambda functions
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'dmgt-assessment-api-${Environment}'
      Description: 'API for the DMGT Assessment Form'
      EndpointConfiguration:
        Types: [REGIONAL]
      # Add a default binary media type for file uploads
      BinaryMediaTypes:
        - '*/*'

  # API Gateway Resources and Methods
  # Note: A resource for each part of the URL path
  QuestionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: questions
  
  QuestionTypeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref QuestionsResource
      PathPart: '{type}'

  QuestionGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref QuestionTypeResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetQuestionsFunction.Arn}/invocations'

  ResponsesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: responses

  ResponsePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ResponsesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveResponseFunction.Arn}/invocations'

  ResponseTypeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ResponsesResource
      PathPart: '{type}'
      
  ResponseCompanyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ResponseTypeResource
      PathPart: '{companyId}'

  ResponseGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ResponseCompanyResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetResponseFunction.Arn}/invocations'

  ResponseEmployeeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ResponseCompanyResource
      PathPart: '{employeeId}'

  ResponseEmployeeGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ResponseEmployeeResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetResponseFunction.Arn}/invocations'
  
  FilesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: files

  FilePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref FilesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FileUploadFunction.Arn}/invocations'

  # This resource enables CORS by responding to OPTIONS requests on all endpoints.
  ApiGatewayCors:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ResponsesResource # Apply to a parent resource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment Stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - QuestionGetMethod
      - ResponsePostMethod
      - ResponseGetMethod
      - ResponseEmployeeGetMethod
      - FilePostMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref Environment

  # Lambda Permissions to be invoked by API Gateway
  GetQuestionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetQuestionsFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'
  
  SaveResponsePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SaveResponseFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  GetResponsePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetResponseFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  FileUploadPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FileUploadFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

Outputs:
  WebsiteBucketName:
    Description: Name of the S3 bucket for the website
    Value: !Ref WebsiteBucket
  ConfigBucketName:
    Description: Name of the S3 bucket for configuration files
    Value: !Ref ConfigBucket
  ResponsesBucketName:
    Description: Name of the S3 bucket for response data
    Value: !Ref ResponsesBucket
  FilesBucketName:
    Description: Name of the S3 bucket for uploaded files
    Value: !Ref FilesBucket
  LambdaCodeBucketName:
    Description: Name of the S3 bucket for Lambda code
    Value: !Ref LambdaCodeBucket
  CloudFrontDistributionId:
    Description: ID of the CloudFront distribution
    Value: !Ref CloudFrontDistribution
  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
  ApiGatewayUrl:
    Description: The invoke URL for the API Gateway stage
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
