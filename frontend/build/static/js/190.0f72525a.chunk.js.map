{"version":3,"file":"static/js/190.0f72525a.chunk.js","mappings":"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","sources":["services/config.js","components/CompanyAssessment.js","components/forms/SaveIndicator.js","components/forms/ProgressBar.js","components/forms/QuestionRenderer.js"],"sourcesContent":["/**\n * Enhanced Configuration Service for DMGT Basic Form V2\n * Dynamic configuration management with environment-specific settings\n * Integrates with the deploy script's .env generation\n */\n\nclass ConfigurationService {\n  constructor() {\n    this.config = this.loadConfiguration();\n    this.validateConfiguration();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance() {\n    if (!ConfigurationService.instance) {\n      ConfigurationService.instance = new ConfigurationService();\n    }\n    return ConfigurationService.instance;\n  }\n\n  /**\n   * Load configuration from environment variables\n   */\n  loadConfiguration() {\n    const env = process.env;\n    \n    // Environment detection\n    const environment = env.REACT_APP_ENVIRONMENT || env.NODE_ENV || 'development';\n    const isDevelopment = environment === 'development';\n    const isProduction = environment === 'production';\n    \n    // AWS Region\n    const awsRegion = env.REACT_APP_AWS_REGION || env.REACT_APP_AwsRegion || 'eu-west-2';\n    \n    // API URLs (dynamically generated by deploy script)\n    const apiGatewayUrl = env.REACT_APP_API_URL || env.REACT_APP_ApiGatewayUrl || '';\n    const getQuestionsApiUrl = env.REACT_APP_GetQuestionsApiUrl || `${apiGatewayUrl}/questions`;\n    const saveResponseApiUrl = env.REACT_APP_SaveResponseApiUrl || `${apiGatewayUrl}/responses`;\n    const fileUploadApiUrl = env.REACT_APP_FileUploadApiUrl || `${apiGatewayUrl}/files`;\n    \n    // S3 Buckets (dynamically generated by deploy script)\n    const websiteBucket = env.REACT_APP_WEBSITE_BUCKET || env.REACT_APP_WebsiteBucket || '';\n    const configBucket = env.REACT_APP_CONFIG_BUCKET || env.REACT_APP_ConfigBucket || '';\n    const responsesBucket = env.REACT_APP_ResponsesBucket || '';\n    const filesBucket = env.REACT_APP_FilesBucket || '';\n    \n    // CloudFront (dynamically generated by deploy script)\n    const cloudFrontUrl = env.REACT_APP_CLOUDFRONT_URL || env.REACT_APP_CloudFrontUrl || '';\n    const cloudFrontDistribution = env.REACT_APP_CloudFrontDistribution || '';\n    \n    // File upload configuration\n    const maxFileSize = 10 * 1024 * 1024; // 10MB\n    const supportedFileTypes = [\n      'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/vnd.ms-powerpoint',\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      'text/plain', 'text/csv'\n    ];\n    \n    return {\n      // Environment\n      environment,\n      isDevelopment,\n      isProduction,\n      \n      // AWS Configuration\n      awsRegion,\n      \n      // API Endpoints\n      apiBaseUrl: apiGatewayUrl,\n      apiGatewayUrl,\n      getQuestionsApiUrl,\n      saveResponseApiUrl,\n      fileUploadApiUrl,\n      \n      // S3 Buckets\n      websiteBucket,\n      configBucket,\n      responsesBucket,\n      filesBucket,\n      \n      // CloudFront\n      cloudFrontUrl,\n      cloudFrontDistribution,\n      \n      // Application Settings\n      appName: 'DMGT Data & AI Readiness Assessment',\n      appVersion: env.REACT_APP_VERSION || '2.1.0',\n      maxFileSize,\n      supportedFileTypes,\n      autoSaveInterval: 30000, // 30 seconds\n      requestTimeout: 30000, // 30 seconds\n      maxRetries: 3,\n      \n      // Feature Flags\n      features: {\n        fileUpload: true,\n        autoSave: true,\n        progressTracking: true,\n        offlineMode: false,\n        analytics: isProduction\n      },\n      \n      // UI Configuration\n      ui: {\n        theme: 'professional',\n        primaryColor: '#007AFF',\n        animationDuration: 300,\n        pageTransitionDelay: 150\n      }\n    };\n  }\n\n  /**\n   * Validate critical configuration values\n   */\n  validateConfiguration() {\n    const errors = [];\n    \n    // Validate required API URL\n    if (!this.config.apiGatewayUrl) {\n      errors.push('API Gateway URL is not configured');\n    }\n    \n    // Validate AWS region\n    if (!this.config.awsRegion) {\n      errors.push('AWS region is not configured');\n    }\n    \n    // Validate environment\n    if (!['development', 'production', 'dev', 'prod'].includes(this.config.environment)) {\n      console.warn(`Unknown environment: ${this.config.environment}`);\n    }\n    \n    if (errors.length > 0) {\n      console.error('Configuration validation failed:', errors);\n      throw new Error(`Configuration errors: ${errors.join(', ')}`);\n    }\n    \n    console.log('✅ Configuration validated successfully');\n    if (this.config.isDevelopment) {\n      console.log('🔧 Configuration:', this.getPublicConfig());\n    }\n  }\n\n  /**\n   * Get the complete configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  /**\n   * Get API configuration\n   */\n  getApiConfig() {\n    return {\n      baseUrl: this.config.apiBaseUrl,\n      timeout: this.config.requestTimeout,\n      maxRetries: this.config.maxRetries,\n      endpoints: {\n        questions: this.config.getQuestionsApiUrl,\n        responses: this.config.saveResponseApiUrl,\n        files: this.config.fileUploadApiUrl\n      }\n    };\n  }\n\n  /**\n   * Get AWS configuration\n   */\n  getAwsConfig() {\n    return {\n      region: this.config.awsRegion,\n      buckets: {\n        website: this.config.websiteBucket,\n        config: this.config.configBucket,\n        responses: this.config.responsesBucket,\n        files: this.config.filesBucket\n      },\n      cloudFront: {\n        url: this.config.cloudFrontUrl,\n        distributionId: this.config.cloudFrontDistribution\n      }\n    };\n  }\n\n  /**\n   * Get file upload configuration\n   */\n  getFileUploadConfig() {\n    return {\n      maxSize: this.config.maxFileSize,\n      supportedTypes: [...this.config.supportedFileTypes],\n      endpoint: this.config.fileUploadApiUrl\n    };\n  }\n\n  /**\n   * Get feature flags\n   */\n  getFeatures() {\n    return { ...this.config.features };\n  }\n\n  /**\n   * Get UI configuration\n   */\n  getUiConfig() {\n    return { ...this.config.ui };\n  }\n\n  /**\n   * Check if a feature is enabled\n   */\n  isFeatureEnabled(feature) {\n    return this.config.features[feature];\n  }\n\n  /**\n   * Get environment-specific settings\n   */\n  getEnvironmentConfig() {\n    return {\n      environment: this.config.environment,\n      isDevelopment: this.config.isDevelopment,\n      isProduction: this.config.isProduction,\n      debugMode: this.config.isDevelopment,\n      logLevel: this.config.isDevelopment ? 'debug' : 'error'\n    };\n  }\n\n  /**\n   * Get public configuration (safe to log)\n   */\n  getPublicConfig() {\n    return {\n      environment: this.config.environment,\n      awsRegion: this.config.awsRegion,\n      appName: this.config.appName,\n      appVersion: this.config.appVersion,\n      features: this.config.features,\n      ui: this.config.ui,\n      hasApiUrl: Boolean(this.config.apiGatewayUrl),\n      hasCloudFrontUrl: Boolean(this.config.cloudFrontUrl)\n    };\n  }\n\n  /**\n   * Update configuration at runtime (for testing/debugging)\n   */\n  updateConfig(updates) {\n    if (this.config.isDevelopment) {\n      this.config = { ...this.config, ...updates };\n      console.log('🔄 Configuration updated:', updates);\n    } else {\n      console.warn('Configuration updates are only allowed in development mode');\n    }\n  }\n\n  /**\n   * Get formatted file size limit\n   */\n  getFormattedMaxFileSize() {\n    const sizeInMB = this.config.maxFileSize / (1024 * 1024);\n    return `${sizeInMB}MB`;\n  }\n\n  /**\n   * Get formatted supported file types\n   */\n  getFormattedSupportedFileTypes() {\n    return this.config.supportedFileTypes\n      .map(type => type.split('/')[1]?.toUpperCase())\n      .filter(Boolean)\n      .join(', ');\n  }\n\n  /**\n   * Check if current environment is development\n   */\n  isDev() {\n    return this.config.isDevelopment;\n  }\n\n  /**\n   * Check if current environment is production\n   */\n  isProd() {\n    return this.config.isProduction;\n  }\n\n  /**\n   * Get application metadata\n   */\n  getAppMetadata() {\n    return {\n      name: this.config.appName,\n      version: this.config.appVersion,\n      environment: this.config.environment,\n      buildDate: process.env.REACT_APP_BUILD_DATE || new Date().toISOString(),\n      commitHash: process.env.REACT_APP_COMMIT_HASH || 'unknown'\n    };\n  }\n}\n\n// Export singleton instance\nexport const config = ConfigurationService.getInstance();\n\n// Export configuration hooks for React components\nexport const useConfig = () => config.getConfig();\nexport const useApiConfig = () => config.getApiConfig();\nexport const useAwsConfig = () => config.getAwsConfig();\nexport const useFeatures = () => config.getFeatures();\nexport const useUiConfig = () => config.getUiConfig();\n\n// Export specific configuration getters\nexport const getApiBaseUrl = () => config.getApiConfig().baseUrl;\nexport const getAwsRegion = () => config.getAwsConfig().region;\nexport const isFeatureEnabled = (feature) => config.isFeatureEnabled(feature);\nexport const isDevelopment = () => config.isDev();\nexport const isProduction = () => config.isProd();\n\n// Export for debugging\nexport const debugConfig = () => {\n  if (config.isDev()) {\n    console.table(config.getPublicConfig());\n  }\n};\n\nexport default config;\n","/**\n * Enhanced CompanyAssessment Component for DMGT Basic Form V2\n * Using shared QuestionRenderer for consistency and better UX\n */\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { getApiService, handleApiResponse } from '../services/api';\nimport config from '../services/config';\nimport LoadingSpinner from './common/LoadingSpinner';\nimport QuestionRenderer from './forms/QuestionRenderer';\nimport ProgressBar from './forms/ProgressBar';\nimport SaveIndicator from './forms/SaveIndicator';\nimport './CompanyAssessment.css';\n\nconst CompanyAssessment = () => {\n  const { companyId } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const state = location.state;\n\n  // Component State\n  const [questions, setQuestions] = useState([]);\n  const [formData, setFormData] = useState({});\n  const [validationErrors, setValidationErrors] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [currentSection, setCurrentSection] = useState(0);\n  const [lastSaved, setLastSaved] = useState(null);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showValidationSummary, setShowValidationSummary] = useState(false);\n\n  const apiService = getApiService();\n\n  /**\n   * Calculate completion progress\n   */\n  const calculateProgress = useCallback(() => {\n    if (questions.length === 0) return { completed: 0, total: 0, percentage: 0 };\n    \n    const answeredQuestions = questions.filter(question => {\n      const answer = formData[question.id];\n      return answer !== undefined && answer !== null && answer !== '';\n    }).length;\n    \n    return {\n      completed: answeredQuestions,\n      total: questions.length,\n      percentage: Math.round((answeredQuestions / questions.length) * 100)\n    };\n  }, [formData, questions]);\n\n  /**\n   * Group questions into logical sections\n   */\n  const questionSections = useMemo(() => {\n    const sections = [\n      {\n        title: 'Strategic Overview',\n        description: 'High-level organizational readiness',\n        questions: questions.filter(q => q.category === 'strategy' || q.section === 'strategic')\n      },\n      {\n        title: 'Infrastructure & Technology',\n        description: 'Technical capabilities and systems',\n        questions: questions.filter(q => q.category === 'infrastructure' || q.section === 'technology')\n      },\n      {\n        title: 'Data Management',\n        description: 'Data governance and quality',\n        questions: questions.filter(q => q.category === 'data' || q.section === 'data_management')\n      },\n      {\n        title: 'AI & Analytics',\n        description: 'AI/ML capabilities and analytics maturity',\n        questions: questions.filter(q => q.category === 'ai' || q.section === 'analytics')\n      },\n      {\n        title: 'Governance & Compliance',\n        description: 'Policies, compliance, and risk management',\n        questions: questions.filter(q => q.category === 'governance' || q.section === 'compliance')\n      }\n    ].filter(section => section.questions.length > 0);\n\n    // If no categories are defined, create a single section\n    if (sections.length === 0 || sections.every(s => s.questions.length === 0)) {\n      return [{\n        title: 'Company Assessment',\n        description: 'Comprehensive organizational evaluation',\n        questions: questions\n      }];\n    }\n\n    return sections;\n  }, [questions]);\n\n  /**\n   * Load questions and existing responses\n   */\n  useEffect(() => {\n    const loadAssessment = async () => {\n      try {\n        setIsLoading(true);\n\n        // Load questions\n        const questionsData = await handleApiResponse(\n          () => apiService.getQuestions('Company'),\n          { errorMessage: 'Failed to load assessment questions' }\n        );\n\n        setQuestions(questionsData);\n\n        // Try to load existing responses\n        if (companyId) {\n          try {\n            const existingData = await apiService.getResponse('Company', companyId);\n            if (existingData?.responses) {\n              setFormData(existingData.responses);\n              setLastSaved(new Date(existingData.lastUpdated || ''));\n            }\n          } catch (error) {\n            // No existing data found, start fresh\n            console.log('No existing assessment found, starting fresh');\n          }\n        }\n\n      } catch (error) {\n        console.error('Failed to load assessment:', error);\n        setValidationErrors([{ field: 'general', message: 'Failed to load assessment. Please try again.' }]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadAssessment();\n  }, [companyId, apiService]);\n\n  /**\n   * Auto-save functionality\n   */\n  useEffect(() => {\n    if (!config.isFeatureEnabled('autoSave') || !companyId || Object.keys(formData).length === 0) {\n      return;\n    }\n\n    const autoSaveTimer = setTimeout(async () => {\n      try {\n        await saveResponse(false); // Silent save\n      } catch (error) {\n        console.warn('Auto-save failed:', error);\n      }\n    }, config.getConfig().autoSaveInterval);\n\n    return () => clearTimeout(autoSaveTimer);\n  }, [formData, companyId]);\n\n  /**\n   * Validate individual question\n   */\n  const validateQuestion = useCallback((question, value) => {\n    if (question.required && (value === undefined || value === null || value === '')) {\n      return {\n        field: question.id,\n        message: 'This field is required',\n        code: 'REQUIRED'\n      };\n    }\n\n    if (question.validation && value !== undefined && value !== null && value !== '') {\n      const validation = question.validation;\n\n      // String length validation\n      if (typeof value === 'string') {\n        if (validation.minLength && value.length < validation.minLength) {\n          return {\n            field: question.id,\n            message: `Must be at least ${validation.minLength} characters`,\n            code: 'MIN_LENGTH'\n          };\n        }\n        if (validation.maxLength && value.length > validation.maxLength) {\n          return {\n            field: question.id,\n            message: `Must be no more than ${validation.maxLength} characters`,\n            code: 'MAX_LENGTH'\n          };\n        }\n        if (validation.pattern && !new RegExp(validation.pattern).test(value)) {\n          return {\n            field: question.id,\n            message: 'Please enter a valid format',\n            code: 'INVALID_FORMAT'\n          };\n        }\n      }\n\n      // Number validation\n      if (typeof value === 'number') {\n        if (validation.min !== undefined && value < validation.min) {\n          return {\n            field: question.id,\n            message: `Must be at least ${validation.min}`,\n            code: 'MIN_VALUE'\n          };\n        }\n        if (validation.max !== undefined && value > validation.max) {\n          return {\n            field: question.id,\n            message: `Must be no more than ${validation.max}`,\n            code: 'MAX_VALUE'\n          };\n        }\n      }\n    }\n\n    return null;\n  }, []);\n\n  /**\n   * Validate all questions\n   */\n  const validateAllQuestions = () => {\n    const errors = [];\n    \n    questions.forEach(question => {\n      const value = formData[question.id];\n      const error = validateQuestion(question, value);\n      if (error) {\n        errors.push(error);\n      }\n    });\n\n    return errors;\n  };\n\n  /**\n   * Handle form field changes\n   */\n  const handleFieldChange = useCallback((questionId, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n\n    // Clear validation error for this field\n    setValidationErrors(prev => prev.filter(error => error.field !== questionId));\n  }, []);\n\n  /**\n   * Handle file uploads\n   */\n  const handleFileUpload = async (questionId, files) => {\n    if (!companyId) return;\n\n    try {\n      const uploadedFiles = await apiService.uploadFiles(companyId, questionId, files);\n      handleFieldChange(questionId, uploadedFiles);\n    } catch (error) {\n      console.error('File upload failed:', error);\n      setValidationErrors(prev => [...prev, {\n        field: questionId,\n        message: 'File upload failed. Please try again.',\n        code: 'UPLOAD_ERROR'\n      }]);\n    }\n  };\n\n  /**\n   * Save assessment response\n   */\n  const saveResponse = useCallback(async (showUI = true) => {\n    if (!companyId) return;\n\n    try {\n      if (showUI) setIsSaving(true);\n\n      const response = await handleApiResponse(\n        () => apiService.saveResponse({\n          assessmentType: 'Company',\n          companyId,\n          responses: formData\n        }),\n        { errorMessage: 'Failed to save assessment' }\n      );\n\n      setLastSaved(new Date());\n      \n      if (showUI) {\n        setShowSuccess(true);\n        setTimeout(() => setShowSuccess(false), 3000);\n      }\n\n      return response;\n    } catch (error) {\n      if (showUI) {\n        setValidationErrors(prev => [...prev, {\n          field: 'general',\n          message: 'Failed to save assessment. Please try again.',\n          code: 'SAVE_ERROR'\n        }]);\n      }\n      throw error;\n    } finally {\n      if (showUI) setIsSaving(false);\n    }\n  }, [companyId, formData, apiService]);\n\n  /**\n   * Submit assessment\n   */\n  const handleSubmit = useCallback(async () => {\n    // Validate all questions\n    const errors = validateAllQuestions();\n    if (errors.length > 0) {\n      setValidationErrors(errors);\n      setShowValidationSummary(true);\n      \n      // Scroll to first error\n      const firstErrorElement = document.querySelector('.form-field.error');\n      firstErrorElement?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      \n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      await saveResponse();\n      \n      // Navigate to completion page\n      navigate(`/complete/Company/${companyId}`, {\n        state: {\n          companyName: state?.companyName,\n          companyId,\n          completionTime: new Date().toISOString(),\n          progress: 100\n        }\n      });\n    } catch (error) {\n      console.error('Submission failed:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [validateAllQuestions, saveResponse, navigate, companyId, state]);\n\n  const progress = calculateProgress();\n\n  if (isLoading) {\n    return (\n      <div className=\"assessment-loading\">\n        <LoadingSpinner size=\"large\" message=\"Loading company assessment...\" />\n      </div>\n    );\n  }\n\n  if (questions.length === 0) {\n    return (\n      <div className=\"assessment-error\">\n        <div className=\"error-content\">\n          <h2>Assessment Not Available</h2>\n          <p>We couldn't load the company assessment questions. Please try again later.</p>\n          <button className=\"btn btn-primary\" onClick={() => window.location.reload()}>\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentSectionData = questionSections[currentSection];\n\n  return (\n    <div className=\"company-assessment\">\n      {/* Header */}\n      <div className=\"assessment-header\">\n        <div className=\"header-content\">\n          <h1>Company Assessment</h1>\n          <p className=\"company-info\">\n            {state?.companyName && (\n              <span className=\"company-name\">{state.companyName}</span>\n            )}\n            <span className=\"company-id\">ID: {companyId}</span>\n          </p>\n        </div>\n      </div>\n\n      {/* Progress and Save Indicator */}\n      <div className=\"progress-section\">\n        <ProgressBar progress={progress} showDetails={true} />\n        <SaveIndicator \n          isSaving={isSaving}\n          lastSaved={lastSaved}\n        />\n      </div>\n\n      {/* Section Navigation */}\n      {questionSections.length > 1 && (\n        <div className=\"section-navigation\">\n          <div className=\"section-tabs\">\n            {questionSections.map((section, index) => (\n              <button\n                key={index}\n                className={`section-tab ${index === currentSection ? 'active' : ''}`}\n                onClick={() => setCurrentSection(index)}\n              >\n                <span className=\"tab-title\">{section.title}</span>\n                <span className=\"tab-count\">\n                  {section.questions.length} questions\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Validation Summary */}\n      {showValidationSummary && validationErrors.length > 0 && (\n        <div className=\"card error-card\">\n          <div className=\"card-header\">\n            <h3>Please Complete Required Fields</h3>\n            <button \n              className=\"close-btn\"\n              onClick={() => setShowValidationSummary(false)}\n            >\n              ×\n            </button>\n          </div>\n          <div className=\"card-body\">\n            <ul>\n              {validationErrors.map((error, index) => {\n                const question = questions.find(q => q.id === error.field);\n                return (\n                  <li key={index}>\n                    <strong>{question?.title || error.field}:</strong> {error.message}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {/* Assessment Form */}\n      <div className=\"assessment-form\">\n        <div className=\"section-header\">\n          <h2>{currentSectionData.title}</h2>\n          <p className=\"section-description\">{currentSectionData.description}</p>\n        </div>\n\n        <div className=\"assessment-questions\">\n          {currentSectionData.questions.map((question) => {\n            const error = validationErrors.find(e => e.field === question.id);\n            \n            return (\n              <div key={question.id} className=\"card question-card\">\n                <div className=\"card-header\">\n                  <h3 className=\"question-title\">\n                    {question.title}\n                    {question.required && <span className=\"required-indicator\">*</span>}\n                  </h3>\n                  {question.description && (\n                    <p className=\"question-description\">{question.description}</p>\n                  )}\n                </div>\n                \n                <div className=\"card-body\">\n                  <QuestionRenderer\n                    question={question}\n                    value={formData[question.id]}\n                    onChange={(value) => handleFieldChange(question.id, value)}\n                    onFileUpload={question.type === 'file' ? handleFileUpload : undefined}\n                    error={error}\n                  />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Navigation & Actions */}\n      <div className=\"assessment-actions\">\n        <div className=\"action-buttons\">\n          {/* Section Navigation */}\n          {questionSections.length > 1 && (\n            <>\n              <button\n                type=\"button\"\n                className=\"btn btn-outline\"\n                disabled={currentSection === 0}\n                onClick={() => setCurrentSection(prev => Math.max(0, prev - 1))}\n              >\n                ← Previous Section\n              </button>\n              \n              {currentSection < questionSections.length - 1 ? (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  onClick={() => setCurrentSection(prev => Math.min(questionSections.length - 1, prev + 1))}\n                >\n                  Next Section →\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  onClick={handleSubmit}\n                  disabled={isSubmitting || progress.percentage < 100}\n                >\n                  {isSubmitting ? 'Submitting...' : 'Complete Assessment'}\n                </button>\n              )}\n            </>\n          )}\n\n          {/* Single section - show submit button */}\n          {questionSections.length === 1 && (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n              disabled={isSubmitting || progress.percentage < 100}\n            >\n              {isSubmitting ? 'Submitting...' : 'Complete Assessment'}\n            </button>\n          )}\n\n          {/* Save Progress Button */}\n          <button\n            type=\"button\"\n            className=\"btn btn-outline\"\n            onClick={() => saveResponse(true)}\n            disabled={isSaving}\n          >\n            {isSaving ? 'Saving...' : 'Save Progress'}\n          </button>\n        </div>\n\n        {/* Success Message */}\n        {showSuccess && (\n          <div className=\"success-message\">\n            <span className=\"success-icon\">✅</span>\n            Assessment saved successfully!\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CompanyAssessment;\n","// DMGT Assessment Form - Save Indicator Component\n// Shows auto-save status and last saved time\n\nimport React from 'react';\n\nconst SaveIndicator = ({ isSaving = false, lastSaved = null, className = '' }) => {\n  \n  // Format last saved time\n  const formatLastSaved = (timestamp) => {\n    if (!timestamp) return null;\n    \n    const now = new Date();\n    const saved = new Date(timestamp);\n    const diffMs = now - saved;\n    const diffSeconds = Math.floor(diffMs / 1000);\n    const diffMinutes = Math.floor(diffSeconds / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n    \n    if (diffSeconds < 30) {\n      return 'just now';\n    } else if (diffSeconds < 60) {\n      return `${diffSeconds} seconds ago`;\n    } else if (diffMinutes < 60) {\n      return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    } else {\n      return saved.toLocaleDateString() + ' at ' + saved.toLocaleTimeString([], { \n        hour: '2-digit', \n        minute: '2-digit' \n      });\n    }\n  };\n\n  if (isSaving) {\n    return (\n      <div className={`save-indicator saving ${className}`}>\n        <div className=\"save-indicator-content\">\n          <div className=\"save-spinner\">\n            <div className=\"spinner-circle\"></div>\n          </div>\n          <span className=\"save-text\">Saving...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (lastSaved) {\n    return (\n      <div className={`save-indicator saved ${className}`}>\n        <div className=\"save-indicator-content\">\n          <div className=\"save-icon\">✓</div>\n          <span className=\"save-text\">\n            Saved {formatLastSaved(lastSaved)}\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`save-indicator unsaved ${className}`}>\n      <div className=\"save-indicator-content\">\n        <div className=\"save-icon\">○</div>\n        <span className=\"save-text\">Not saved</span>\n      </div>\n    </div>\n  );\n};\n\nexport default SaveIndicator;","// DMGT Assessment Form - Progress Bar Component\n// Shows assessment completion progress with visual indicators\n\nimport React from 'react';\n\nconst ProgressBar = ({ progress, showDetails = false, className = '' }) => {\n  const { completed = 0, total = 0, percentage = 0 } = progress || {};\n\n  return (\n    <div className={`progress-bar-container ${className}`}>\n      {showDetails && (\n        <div className=\"progress-details\">\n          <div className=\"progress-stats\">\n            <span className=\"completed-count\">{completed}</span>\n            <span className=\"separator\">of</span>\n            <span className=\"total-count\">{total}</span>\n            <span className=\"progress-label\">questions completed</span>\n          </div>\n          <div className=\"progress-percentage\">\n            {percentage}%\n          </div>\n        </div>\n      )}\n      \n      <div className=\"progress-bar-track\">\n        <div \n          className=\"progress-bar-fill\"\n          style={{ \n            width: `${Math.min(100, Math.max(0, percentage))}%`,\n            transition: 'width 0.3s ease-in-out'\n          }}\n        />\n      </div>\n\n      {showDetails && (\n        <div className=\"progress-milestones\">\n          <div className={`milestone ${percentage >= 25 ? 'completed' : ''}`}>\n            <div className=\"milestone-marker\" />\n            <span className=\"milestone-label\">25%</span>\n          </div>\n          <div className={`milestone ${percentage >= 50 ? 'completed' : ''}`}>\n            <div className=\"milestone-marker\" />\n            <span className=\"milestone-label\">50%</span>\n          </div>\n          <div className={`milestone ${percentage >= 75 ? 'completed' : ''}`}>\n            <div className=\"milestone-marker\" />\n            <span className=\"milestone-label\">75%</span>\n          </div>\n          <div className={`milestone ${percentage >= 100 ? 'completed' : ''}`}>\n            <div className=\"milestone-marker\" />\n            <span className=\"milestone-label\">Complete</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProgressBar;","import React from 'react';\n\nconst QuestionRenderer = ({ question, value, onChange, onFileUpload, error }) => {\n  const handleInputChange = (e) => {\n    const newValue = e.target.value;\n    onChange(newValue);\n  };\n\n  const handleFileChange = (e) => {\n    const files = e.target.files;\n    if (files && files.length > 0 && onFileUpload) {\n      onFileUpload(question.id, files);\n    }\n  };\n\n  const handleCheckboxChange = (e) => {\n    if (question.type === 'multiselect') {\n      const currentValues = Array.isArray(value) ? value : [];\n      const optionValue = e.target.value;\n      \n      if (e.target.checked) {\n        onChange([...currentValues, optionValue]);\n      } else {\n        onChange(currentValues.filter(v => v !== optionValue));\n      }\n    } else {\n      onChange(e.target.checked);\n    }\n  };\n\n  const renderInput = () => {\n    switch (question.type) {\n      case 'text':\n      case 'email':\n      case 'number':\n        return (\n          <input\n            type={question.type}\n            value={value || ''}\n            onChange={handleInputChange}\n            placeholder={question.placeholder}\n            className={`form-input ${error ? 'error' : ''}`}\n            required={question.required}\n          />\n        );\n\n      case 'textarea':\n        return (\n          <textarea\n            value={value || ''}\n            onChange={handleInputChange}\n            placeholder={question.placeholder}\n            rows={question.rows || 4}\n            className={`form-textarea ${error ? 'error' : ''}`}\n            required={question.required}\n          />\n        );\n\n      case 'select':\n        return (\n          <select\n            value={value || ''}\n            onChange={handleInputChange}\n            className={`form-select ${error ? 'error' : ''}`}\n            required={question.required}\n          >\n            <option value=\"\">Please select...</option>\n            {question.options?.map((option, index) => (\n              <option key={index} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        );\n\n      case 'radio':\n        return (\n          <div className=\"radio-group\">\n            {question.options?.map((option, index) => (\n              <label key={index} className=\"radio-label\">\n                <input\n                  type=\"radio\"\n                  name={question.id}\n                  value={option}\n                  checked={value === option}\n                  onChange={handleInputChange}\n                  className=\"radio-input\"\n                />\n                <span className=\"radio-text\">{option}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      case 'checkbox':\n        return (\n          <label className=\"checkbox-label\">\n            <input\n              type=\"checkbox\"\n              checked={value || false}\n              onChange={handleCheckboxChange}\n              className=\"checkbox-input\"\n            />\n            <span className=\"checkbox-text\">Yes</span>\n          </label>\n        );\n\n      case 'multiselect':\n        return (\n          <div className=\"checkbox-group\">\n            {question.options?.map((option, index) => (\n              <label key={index} className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  value={option}\n                  checked={Array.isArray(value) && value.includes(option)}\n                  onChange={handleCheckboxChange}\n                  className=\"checkbox-input\"\n                />\n                <span className=\"checkbox-text\">{option}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      case 'file':\n        return (\n          <input\n            type=\"file\"\n            onChange={handleFileChange}\n            accept={question.accept}\n            multiple={question.multiple}\n            className={`form-file ${error ? 'error' : ''}`}\n          />\n        );\n\n      case 'rating':\n      case 'scale':\n        const max = question.validation?.max || 5;\n        return (\n          <div className=\"rating-group\">\n            {Array.from({ length: max }, (_, i) => i + 1).map(num => (\n              <label key={num} className=\"rating-label\">\n                <input\n                  type=\"radio\"\n                  name={question.id}\n                  value={num}\n                  checked={parseInt(value) === num}\n                  onChange={handleInputChange}\n                  className=\"rating-input\"\n                />\n                <span className=\"rating-text\">{num}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      default:\n        return (\n          <input\n            type=\"text\"\n            value={value || ''}\n            onChange={handleInputChange}\n            placeholder={question.placeholder}\n            className={`form-input ${error ? 'error' : ''}`}\n            required={question.required}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className={`question-renderer ${error ? 'has-error' : ''}`}>\n      {renderInput()}\n      {error && (\n        <div className=\"error-message\">\n          {error.message}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionRenderer;\n"],"names":["ConfigurationService","constructor","this","config","loadConfiguration","validateConfiguration","getInstance","instance","env","process","environment","REACT_APP_ENVIRONMENT","NODE_ENV","isProduction","apiGatewayUrl","REACT_APP_API_URL","REACT_APP_ApiGatewayUrl","isDevelopment","awsRegion","REACT_APP_AWS_REGION","REACT_APP_AwsRegion","apiBaseUrl","getQuestionsApiUrl","REACT_APP_GetQuestionsApiUrl","concat","saveResponseApiUrl","REACT_APP_SaveResponseApiUrl","fileUploadApiUrl","REACT_APP_FileUploadApiUrl","websiteBucket","REACT_APP_WEBSITE_BUCKET","REACT_APP_WebsiteBucket","configBucket","REACT_APP_CONFIG_BUCKET","REACT_APP_ConfigBucket","responsesBucket","REACT_APP_ResponsesBucket","filesBucket","REACT_APP_FilesBucket","cloudFrontUrl","REACT_APP_CLOUDFRONT_URL","REACT_APP_CloudFrontUrl","cloudFrontDistribution","REACT_APP_CloudFrontDistribution","appName","appVersion","REACT_APP_VERSION","maxFileSize","supportedFileTypes","autoSaveInterval","requestTimeout","maxRetries","features","fileUpload","autoSave","progressTracking","offlineMode","analytics","ui","theme","primaryColor","animationDuration","pageTransitionDelay","errors","push","includes","console","warn","length","error","Error","join","log","getPublicConfig","getConfig","_objectSpread","getApiConfig","baseUrl","timeout","endpoints","questions","responses","files","getAwsConfig","region","buckets","website","cloudFront","url","distributionId","getFileUploadConfig","maxSize","supportedTypes","endpoint","getFeatures","getUiConfig","isFeatureEnabled","feature","getEnvironmentConfig","debugMode","logLevel","hasApiUrl","Boolean","hasCloudFrontUrl","updateConfig","updates","getFormattedMaxFileSize","sizeInMB","getFormattedSupportedFileTypes","map","type","_type$split$","split","toUpperCase","filter","isDev","isProd","getAppMetadata","name","version","buildDate","REACT_APP_BUILD_DATE","Date","toISOString","commitHash","REACT_APP_COMMIT_HASH","CompanyAssessment","companyId","useParams","location","useLocation","navigate","useNavigate","state","setQuestions","useState","formData","setFormData","validationErrors","setValidationErrors","isLoading","setIsLoading","isSaving","setIsSaving","isSubmitting","setIsSubmitting","currentSection","setCurrentSection","lastSaved","setLastSaved","showSuccess","setShowSuccess","showValidationSummary","setShowValidationSummary","apiService","getApiService","calculateProgress","useCallback","completed","total","percentage","answeredQuestions","question","answer","id","undefined","Math","round","questionSections","useMemo","sections","title","description","q","category","section","every","s","useEffect","async","questionsData","handleApiResponse","getQuestions","errorMessage","existingData","getResponse","lastUpdated","field","message","loadAssessment","Object","keys","autoSaveTimer","setTimeout","saveResponse","clearTimeout","validateQuestion","value","required","code","validation","minLength","maxLength","pattern","RegExp","test","min","max","validateAllQuestions","forEach","handleFieldChange","questionId","prev","handleFileUpload","uploadedFiles","uploadFiles","showUI","arguments","response","assessmentType","handleSubmit","firstErrorElement","document","querySelector","scrollIntoView","behavior","block","companyName","completionTime","progress","_jsx","className","children","LoadingSpinner","size","_jsxs","onClick","window","reload","currentSectionData","ProgressBar","showDetails","SaveIndicator","index","find","e","QuestionRenderer","onChange","onFileUpload","_Fragment","disabled","_ref","formatLastSaved","timestamp","now","saved","diffMs","diffSeconds","floor","diffMinutes","diffHours","toLocaleDateString","toLocaleTimeString","hour","minute","style","width","transition","handleInputChange","newValue","target","handleFileChange","handleCheckboxChange","currentValues","Array","isArray","optionValue","checked","v","renderInput","_question$options","_question$options2","_question$options3","_question$validation","placeholder","rows","options","option","accept","multiple","from","_","i","num","parseInt"],"sourceRoot":""}