{"version":3,"file":"static/js/489.062b98a5.chunk.js","mappings":"qNAIA,MAAMA,EAAmBC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MACPS,OAAM,KAEPC,QAAQC,KAAK,wCAKnB,IAKaC,EAAoCZ,IAK/C,GAHAD,EAAgBC,GAGW,oBAAhBA,EAA4B,CAErC,GAAI,gBAAiBa,QAAU,qBAAsBA,OAAOC,YAAa,CACvE,MAAMC,EAAoBF,OAAOC,YAAYE,iBAAiB,cAC9D,GAAID,EAAkBE,OAAS,EAAG,CAChC,MAAMC,EAAQH,EAAkB,GAG1BI,EAAmBD,EAAME,yBAA2BF,EAAMG,2BAC1DC,EAAeJ,EAAMK,aAAeL,EAAMM,eAC1CC,EAAgBP,EAAMK,aAAeL,EAAMQ,WAEjD1B,EAAY,CACV2B,KAAM,4BACNC,MAAOT,EACPU,GAAI,qBACJC,MAAOX,EACPY,QAAS,CAACb,GACVc,eAAgB,aAGlBhC,EAAY,CACV2B,KAAM,uBACNC,MAAON,EACPO,GAAI,gBACJC,MAAOR,EACPS,QAAS,CAACb,GACVc,eAAgB,aAGlBhC,EAAY,CACV2B,KAAM,yBACNC,MAAOH,EACPI,GAAI,kBACJC,MAAOL,EACPM,QAAS,CAACb,GACVc,eAAgB,YAEpB,CACF,CAGA,GAAI,WAAYlB,YAAa,CAE3Bd,EAAY,CACV2B,KAAM,sBACNC,MAHad,YAAYmB,OAGXC,eACdL,GAAI,eACJC,MAAO,EACPC,QAAS,GACTC,eAAgB,YAEpB,CACF,GAMWG,EAAmBC,IAEV,qBAATC,MACTA,KAAK,QAASD,EAAOT,KAAM,CACzBC,MAAOU,KAAKC,MAAsB,QAAhBH,EAAOT,KAAgC,IAAfS,EAAOR,MAAeQ,EAAOR,OACvEY,eAAgB,aAChBC,YAAaL,EAAOP,GACpBa,iBAAiB,IAKjBC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,sBAAAA,MAAAA,qBAAAA,YAAAA,iCAAAA,iBAAAA,wBAAAA,uCAAAA,6BAAAA,uEAAAA,qBAAAA,qFAAAA,sBAAAA,yCAAAA,0BAAAA,6CAAAA,2BAAAA,mEAAAA,6BAAAA,uEAAAA,wBAAAA,6DAAAA,wBAAAA,2CAAAA,oBAAAA,YAAAA,sBAAAA,MAAAA,uBAAAA,0CAAAA,2BAAAA,gDAAYC,8BACdC,MAAMF,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,sBAAAA,MAAAA,qBAAAA,YAAAA,iCAAAA,iBAAAA,wBAAAA,uCAAAA,6BAAAA,uEAAAA,qBAAAA,qFAAAA,sBAAAA,yCAAAA,0BAAAA,6CAAAA,2BAAAA,mEAAAA,6BAAAA,uEAAAA,wBAAAA,6DAAAA,wBAAAA,2CAAAA,oBAAAA,YAAAA,sBAAAA,MAAAA,uBAAAA,0CAAAA,2BAAAA,gDAAYC,6BAA8B,CAC9CE,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBd,OAAQA,EAAOT,KACfC,MAAOQ,EAAOR,MACdC,GAAIO,EAAOP,GACXsB,UAAWC,KAAKC,MAChBC,IAAKzC,OAAO0C,SAASC,KACrBC,UAAWC,UAAUD,cAEtBhD,OAAM,KAEPC,QAAQC,KAAK,oC","sources":["utils/reportWebVitals.js"],"sourcesContent":["/**\n * Report web vitals to the console or analytics service\n * This function reports Core Web Vitals and other performance metrics\n */\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    }).catch(() => {\n      // Silently fail if web-vitals is not available\n      console.warn('Web vitals library not available');\n    });\n  }\n};\n\nexport default reportWebVitals;\n\n/**\n * Enhanced web vitals reporting with custom metrics\n */\nexport const reportWebVitalsWithCustomMetrics = (onPerfEntry) => {\n  // Report standard web vitals\n  reportWebVitals(onPerfEntry);\n  \n  // Report custom performance metrics\n  if (typeof onPerfEntry === 'function') {\n    // Report navigation timing\n    if ('performance' in window && 'getEntriesByType' in window.performance) {\n      const navigationEntries = window.performance.getEntriesByType('navigation');\n      if (navigationEntries.length > 0) {\n        const entry = navigationEntries[0];\n        \n        // Custom metrics\n        const domContentLoaded = entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart;\n        const loadComplete = entry.loadEventEnd - entry.loadEventStart;\n        const totalPageLoad = entry.loadEventEnd - entry.fetchStart;\n        \n        onPerfEntry({\n          name: 'custom-dom-content-loaded',\n          value: domContentLoaded,\n          id: 'dom-content-loaded',\n          delta: domContentLoaded,\n          entries: [entry],\n          navigationType: 'navigate'\n        });\n        \n        onPerfEntry({\n          name: 'custom-load-complete',\n          value: loadComplete,\n          id: 'load-complete',\n          delta: loadComplete,\n          entries: [entry],\n          navigationType: 'navigate'\n        });\n        \n        onPerfEntry({\n          name: 'custom-total-page-load',\n          value: totalPageLoad,\n          id: 'total-page-load',\n          delta: totalPageLoad,\n          entries: [entry],\n          navigationType: 'navigate'\n        });\n      }\n    }\n    \n    // Report memory usage if available\n    if ('memory' in performance) {\n      const memory = performance.memory;\n      onPerfEntry({\n        name: 'custom-memory-usage',\n        value: memory.usedJSHeapSize,\n        id: 'memory-usage',\n        delta: 0,\n        entries: [],\n        navigationType: 'navigate'\n      });\n    }\n  }\n};\n\n/**\n * Send web vitals to analytics service\n */\nexport const sendToAnalytics = (metric) => {\n  // Example: Send to Google Analytics\n  if (typeof gtag !== 'undefined') {\n    gtag('event', metric.name, {\n      value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n      event_category: 'Web Vitals',\n      event_label: metric.id,\n      non_interaction: true,\n    });\n  }\n  \n  // Example: Send to custom analytics endpoint\n  if (process.env.REACT_APP_ANALYTICS_ENDPOINT) {\n    fetch(process.env.REACT_APP_ANALYTICS_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        metric: metric.name,\n        value: metric.value,\n        id: metric.id,\n        timestamp: Date.now(),\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n      }),\n    }).catch(() => {\n      // Silently fail if analytics endpoint is not available\n      console.warn('Failed to send analytics data');\n    });\n  }\n  \n  // Log to console in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Web Vital: ${metric.name}`, metric);\n  }\n};\n"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","catch","console","warn","reportWebVitalsWithCustomMetrics","window","performance","navigationEntries","getEntriesByType","length","entry","domContentLoaded","domContentLoadedEventEnd","domContentLoadedEventStart","loadComplete","loadEventEnd","loadEventStart","totalPageLoad","fetchStart","name","value","id","delta","entries","navigationType","memory","usedJSHeapSize","sendToAnalytics","metric","gtag","Math","round","event_category","event_label","non_interaction","process","REACT_APP_ANALYTICS_ENDPOINT","fetch","method","headers","body","JSON","stringify","timestamp","Date","now","url","location","href","userAgent","navigator"],"sourceRoot":""}