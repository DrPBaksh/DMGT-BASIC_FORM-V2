{"version":3,"file":"static/js/575.3ae58d2a.chunk.js","mappings":"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","sources":["components/EmployeeAssessment.js","components/forms/SaveIndicator.js","components/forms/ProgressBar.js","components/forms/QuestionRenderer.js"],"sourcesContent":["/**\n * Employee Assessment Component - Complete Implementation\n * Individual employee assessment form with full functionality\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAssessment } from '../context/AssessmentContext';\nimport { getApiService } from '../services/api';\nimport LoadingSpinner from './common/LoadingSpinner';\nimport QuestionRenderer from './forms/QuestionRenderer';\nimport ProgressBar from './forms/ProgressBar';\nimport SaveIndicator from './forms/SaveIndicator';\n\nconst EmployeeAssessment = () => {\n  const { companyId, employeeId } = useParams();\n  const navigate = useNavigate();\n  const { state, startAssessment, loadQuestions, updateResponse, saveAssessment } = useAssessment();\n\n  // Local state\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [validationErrors, setValidationErrors] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [lastSaved, setLastSaved] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showValidationSummary, setShowValidationSummary] = useState(false);\n\n  const apiService = getApiService();\n\n  // Auto-save interval\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (Object.keys(responses).length > 0 && !isSaving) {\n        handleAutoSave();\n      }\n    }, 30000); // Auto-save every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [responses, isSaving]);\n\n  // Load questions on mount\n  useEffect(() => {\n    if (companyId) {\n      loadQuestions('Employee');\n      if (employeeId) {\n        loadPreviousResponses();\n      }\n    }\n  }, [companyId, employeeId, loadQuestions]);\n\n  const loadPreviousResponses = async () => {\n    if (!companyId || !employeeId) return;\n\n    try {\n      const savedResponses = await apiService.getResponse('Employee', companyId, employeeId);\n      if (savedResponses && Object.keys(savedResponses).length > 0) {\n        setResponses(savedResponses);\n        \n        // Find the first unanswered question\n        const firstUnanswered = state.questions.Employee?.questions.findIndex(q => !savedResponses[q.id]) || 0;\n        if (firstUnanswered >= 0) {\n          setCurrentQuestionIndex(firstUnanswered);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load previous responses:', error);\n    }\n  };\n\n  const handleAutoSave = useCallback(async () => {\n    if (!companyId || !employeeId || Object.keys(responses).length === 0) return;\n\n    setIsSaving(true);\n    try {\n      await apiService.saveResponse({\n        assessmentType: 'Employee',\n        companyId,\n        employeeId,\n        responses\n      });\n      setLastSaved(new Date());\n    } catch (error) {\n      console.error('Auto-save failed:', error);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [companyId, employeeId, responses, apiService]);\n\n  const handleManualSave = async () => {\n    await handleAutoSave();\n  };\n\n  const handleQuestionResponse = (questionId, value) => {\n    setResponses(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n\n    // Clear validation errors for this question\n    setValidationErrors(prev => prev.filter(error => error.field !== questionId));\n  };\n\n  const validateQuestion = (question, value) => {\n    // Required field validation\n    if (question.required && (value === undefined || value === null || value === '')) {\n      return {\n        field: question.id,\n        message: 'This field is required',\n        code: 'REQUIRED'\n      };\n    }\n\n    // Type-specific validation\n    if (value !== undefined && value !== null && value !== '') {\n      switch (question.type) {\n        case 'text':\n        case 'textarea':\n          if (question.validation?.minLength && value.length < question.validation.minLength) {\n            return {\n              field: question.id,\n              message: `Minimum length is ${question.validation.minLength} characters`,\n              code: 'MIN_LENGTH'\n            };\n          }\n          if (question.validation?.maxLength && value.length > question.validation.maxLength) {\n            return {\n              field: question.id,\n              message: `Maximum length is ${question.validation.maxLength} characters`,\n              code: 'MAX_LENGTH'\n            };\n          }\n          break;\n        \n        case 'email':\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (!emailRegex.test(value)) {\n            return {\n              field: question.id,\n              message: 'Please enter a valid email address',\n              code: 'INVALID_EMAIL'\n            };\n          }\n          break;\n\n        case 'number':\n        case 'rating':\n          const numValue = Number(value);\n          if (isNaN(numValue)) {\n            return {\n              field: question.id,\n              message: 'Please enter a valid number',\n              code: 'INVALID_NUMBER'\n            };\n          }\n          if (question.validation?.min !== undefined && numValue < question.validation.min) {\n            return {\n              field: question.id,\n              message: `Minimum value is ${question.validation.min}`,\n              code: 'MIN_VALUE'\n            };\n          }\n          if (question.validation?.max !== undefined && numValue > question.validation.max) {\n            return {\n              field: question.id,\n              message: `Maximum value is ${question.validation.max}`,\n              code: 'MAX_VALUE'\n            };\n          }\n          break;\n      }\n    }\n\n    return null;\n  };\n\n  const validateAllQuestions = () => {\n    const errors = [];\n    \n    state.questions.Employee?.questions.forEach(question => {\n      const value = responses[question.id];\n      const error = validateQuestion(question, value);\n      if (error) {\n        errors.push(error);\n      }\n    });\n\n    return errors;\n  };\n\n  const handleSubmit = async () => {\n    // Validate all questions\n    const errors = validateAllQuestions();\n    if (errors.length > 0) {\n      setValidationErrors(errors);\n      setShowValidationSummary(true);\n      return;\n    }\n\n    if (!companyId || !employeeId) return;\n\n    setIsSubmitting(true);\n    try {\n      // Final save before submission\n      await apiService.saveResponse({\n        assessmentType: 'Employee',\n        companyId,\n        employeeId,\n        responses\n      });\n      \n      // Navigate to completion page\n      navigate(`/complete/Employee/${companyId}/${employeeId}`);\n    } catch (error) {\n      console.error('Submission failed:', error);\n      // Show error message to user\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handlePreviousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    const totalQuestions = state.questions.Employee?.questions.length || 0;\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  const handleFileUpload = async (questionId, files) => {\n    if (!companyId || !employeeId) return;\n\n    try {\n      const uploadedFiles = await apiService.uploadFiles(companyId, questionId, files);\n      handleQuestionResponse(questionId, uploadedFiles);\n    } catch (error) {\n      console.error('File upload failed:', error);\n    }\n  };\n\n  const calculateProgress = () => {\n    const totalQuestions = state.questions.Employee?.questions.length || 0;\n    const answeredQuestions = state.questions.Employee?.questions.filter(q => responses[q.id] !== undefined).length || 0;\n    return {\n      completed: answeredQuestions,\n      total: totalQuestions,\n      percentage: totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\n    };\n  };\n\n  const progress = calculateProgress();\n  const questions = state.questions.Employee?.questions || [];\n  const currentQuestion = questions[currentQuestionIndex];\n  const currentValue = currentQuestion ? responses[currentQuestion.id] : undefined;\n  const currentError = validationErrors.find(error => error.field === currentQuestion?.id);\n\n  if (state.loading.questions) {\n    return (\n      <div className=\"page-container\">\n        <LoadingSpinner \n          size=\"large\" \n          message=\"Loading your employee assessment questions...\" \n        />\n      </div>\n    );\n  }\n\n  if (questions.length === 0) {\n    return (\n      <div className=\"page-container\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h2>No Questions Available</h2>\n            <p>Employee assessment questions are not available at this time.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"content-container\">\n        {/* Header */}\n        <div className=\"assessment-header\">\n          <h1 className=\"heading-1\">Employee Assessment</h1>\n          <p className=\"body-large\">\n            Personal evaluation for Employee ID: {employeeId} at Company ID: {companyId}\n          </p>\n        </div>\n\n        {/* Progress */}\n        <div className=\"progress-section\">\n          <ProgressBar \n            progress={progress}\n            showDetails={true}\n          />\n          <SaveIndicator \n            isSaving={isSaving}\n            lastSaved={lastSaved}\n          />\n        </div>\n\n        {/* Validation Summary */}\n        {showValidationSummary && validationErrors.length > 0 && (\n          <div className=\"card error-card\">\n            <div className=\"card-header\">\n              <h3>Please Complete Required Fields</h3>\n              <button \n                className=\"close-btn\"\n                onClick={() => setShowValidationSummary(false)}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"card-body\">\n              <ul>\n                {validationErrors.map((error, index) => {\n                  const question = questions.find(q => q.id === error.field);\n                  return (\n                    <li key={index}>\n                      <strong>{question?.title || error.field}:</strong> {error.message}\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n        )}\n\n        {/* Question Card */}\n        {currentQuestion && (\n          <div className=\"card question-card\">\n            <div className=\"card-header\">\n              <div className=\"question-header\">\n                <span className=\"question-number\">\n                  Question {currentQuestionIndex + 1} of {questions.length}\n                </span>\n                {currentQuestion.category && (\n                  <span className=\"question-category\">{currentQuestion.category}</span>\n                )}\n              </div>\n              <h3 className=\"question-title\">\n                {currentQuestion.title}\n                {currentQuestion.required && <span className=\"required-indicator\">*</span>}\n              </h3>\n              {currentQuestion.description && (\n                <p className=\"question-description\">{currentQuestion.description}</p>\n              )}\n            </div>\n            \n            <div className=\"card-body\">\n              <QuestionRenderer\n                question={currentQuestion}\n                value={currentValue}\n                onChange={(value) => handleQuestionResponse(currentQuestion.id, value)}\n                onFileUpload={currentQuestion.type === 'file' ? handleFileUpload : undefined}\n                error={currentError}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Navigation */}\n        <div className=\"question-navigation\">\n          <button\n            className=\"btn btn-outline\"\n            onClick={handlePreviousQuestion}\n            disabled={currentQuestionIndex === 0}\n          >\n            ← Previous\n          </button>\n\n          <div className=\"nav-info\">\n            {currentQuestionIndex + 1} of {questions.length}\n          </div>\n\n          <button\n            className=\"btn btn-outline\"\n            onClick={handleNextQuestion}\n            disabled={currentQuestionIndex === questions.length - 1}\n          >\n            Next →\n          </button>\n        </div>\n\n        {/* Actions */}\n        <div className=\"assessment-actions\">\n          <button \n            className=\"btn btn-outline\"\n            onClick={handleManualSave}\n            disabled={isSaving}\n          >\n            {isSaving ? 'Saving...' : 'Save Progress'}\n          </button>\n\n          <button \n            className=\"btn btn-primary\"\n            onClick={handleSubmit}\n            disabled={isSubmitting || progress.percentage < 100}\n          >\n            {isSubmitting ? 'Submitting...' : 'Submit Assessment'}\n          </button>\n        </div>\n\n        {/* Assessment Info */}\n        <div className=\"card info-card\">\n          <div className=\"card-header\">\n            <h3>Assessment Information</h3>\n          </div>\n          <div className=\"card-body\">\n            <div className=\"info-grid\">\n              <div className=\"info-item\">\n                <span className=\"info-label\">Employee ID:</span>\n                <span className=\"info-value\">{employeeId}</span>\n              </div>\n              <div className=\"info-item\">\n                <span className=\"info-label\">Company ID:</span>\n                <span className=\"info-value\">{companyId}</span>\n              </div>\n              <div className=\"info-item\">\n                <span className=\"info-label\">Progress:</span>\n                <span className=\"info-value\">{progress.percentage}% Complete</span>\n              </div>\n              {lastSaved && (\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Last Saved:</span>\n                  <span className=\"info-value\">{lastSaved.toLocaleTimeString()}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeAssessment;\n","// DMGT Assessment Form - Save Indicator Component\n// Shows auto-save status and last saved time\n\nimport React from 'react';\n\nconst SaveIndicator = ({ isSaving = false, lastSaved = null, className = '' }) => {\n  \n  // Format last saved time\n  const formatLastSaved = (timestamp) => {\n    if (!timestamp) return null;\n    \n    const now = new Date();\n    const saved = new Date(timestamp);\n    const diffMs = now - saved;\n    const diffSeconds = Math.floor(diffMs / 1000);\n    const diffMinutes = Math.floor(diffSeconds / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n    \n    if (diffSeconds < 30) {\n      return 'just now';\n    } else if (diffSeconds < 60) {\n      return `${diffSeconds} seconds ago`;\n    } else if (diffMinutes < 60) {\n      return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    } else {\n      return saved.toLocaleDateString() + ' at ' + saved.toLocaleTimeString([], { \n        hour: '2-digit', \n        minute: '2-digit' \n      });\n    }\n  };\n\n  if (isSaving) {\n    return (\n      <div className={`save-indicator saving ${className}`}>\n        <div className=\"save-indicator-content\">\n          <div className=\"save-spinner\">\n            <div className=\"spinner-circle\"></div>\n          </div>\n          <span className=\"save-text\">Saving...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (lastSaved) {\n    return (\n      <div className={`save-indicator saved ${className}`}>\n        <div className=\"save-indicator-content\">\n          <div className=\"save-icon\">✓</div>\n          <span className=\"save-text\">\n            Saved {formatLastSaved(lastSaved)}\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`save-indicator unsaved ${className}`}>\n      <div className=\"save-indicator-content\">\n        <div className=\"save-icon\">○</div>\n        <span className=\"save-text\">Not saved</span>\n      </div>\n    </div>\n  );\n};\n\nexport default SaveIndicator;","// DMGT Assessment Form - Progress Bar Component\n// Shows assessment completion progress with visual indicators\n\nimport React from 'react';\n\nconst ProgressBar = ({ progress, showDetails = false, className = '' }) => {\n  const { completed = 0, total = 0, percentage = 0 } = progress || {};\n\n  return (\n    <div className={`progress-bar-container ${className}`}>\n      {showDetails && (\n        <div className=\"progress-details\">\n          <div className=\"progress-stats\">\n            <span className=\"completed-count\">{completed}</span>\n            <span className=\"separator\">of</span>\n            <span className=\"total-count\">{total}</span>\n            <span className=\"progress-label\">questions completed</span>\n          </div>\n          <div className=\"progress-percentage\">\n            {percentage}%\n          </div>\n        </div>\n      )}\n      \n      <div className=\"progress-bar-track\">\n        <div \n          className=\"progress-bar-fill\"\n          style={{ \n            width: `${Math.min(100, Math.max(0, percentage))}%`,\n            transition: 'width 0.3s ease-in-out'\n          }}\n        />\n      </div>\n\n      {showDetails && (\n        <div className=\"progress-milestones\">\n          <div className={`milestone ${percentage >= 25 ? 'completed' : ''}`}>\n            <div className=\"milestone-marker\" />\n            <span className=\"milestone-label\">25%</span>\n          </div>\n          <div className={`milestone ${percentage >= 50 ? 'completed' : ''}`}>\n            <div className=\"milestone-marker\" />\n            <span className=\"milestone-label\">50%</span>\n          </div>\n          <div className={`milestone ${percentage >= 75 ? 'completed' : ''}`}>\n            <div className=\"milestone-marker\" />\n            <span className=\"milestone-label\">75%</span>\n          </div>\n          <div className={`milestone ${percentage >= 100 ? 'completed' : ''}`}>\n            <div className=\"milestone-marker\" />\n            <span className=\"milestone-label\">Complete</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProgressBar;","import React from 'react';\n\nconst QuestionRenderer = ({ question, value, onChange, onFileUpload, error }) => {\n  const handleInputChange = (e) => {\n    const newValue = e.target.value;\n    onChange(newValue);\n  };\n\n  const handleFileChange = (e) => {\n    const files = e.target.files;\n    if (files && files.length > 0 && onFileUpload) {\n      onFileUpload(question.id, files);\n    }\n  };\n\n  const handleCheckboxChange = (e) => {\n    if (question.type === 'multiselect') {\n      const currentValues = Array.isArray(value) ? value : [];\n      const optionValue = e.target.value;\n      \n      if (e.target.checked) {\n        onChange([...currentValues, optionValue]);\n      } else {\n        onChange(currentValues.filter(v => v !== optionValue));\n      }\n    } else {\n      onChange(e.target.checked);\n    }\n  };\n\n  const renderInput = () => {\n    switch (question.type) {\n      case 'text':\n      case 'email':\n      case 'number':\n        return (\n          <input\n            type={question.type}\n            value={value || ''}\n            onChange={handleInputChange}\n            placeholder={question.placeholder}\n            className={`form-input ${error ? 'error' : ''}`}\n            required={question.required}\n          />\n        );\n\n      case 'textarea':\n        return (\n          <textarea\n            value={value || ''}\n            onChange={handleInputChange}\n            placeholder={question.placeholder}\n            rows={question.rows || 4}\n            className={`form-textarea ${error ? 'error' : ''}`}\n            required={question.required}\n          />\n        );\n\n      case 'select':\n        return (\n          <select\n            value={value || ''}\n            onChange={handleInputChange}\n            className={`form-select ${error ? 'error' : ''}`}\n            required={question.required}\n          >\n            <option value=\"\">Please select...</option>\n            {question.options?.map((option, index) => (\n              <option key={index} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        );\n\n      case 'radio':\n        return (\n          <div className=\"radio-group\">\n            {question.options?.map((option, index) => (\n              <label key={index} className=\"radio-label\">\n                <input\n                  type=\"radio\"\n                  name={question.id}\n                  value={option}\n                  checked={value === option}\n                  onChange={handleInputChange}\n                  className=\"radio-input\"\n                />\n                <span className=\"radio-text\">{option}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      case 'checkbox':\n        return (\n          <label className=\"checkbox-label\">\n            <input\n              type=\"checkbox\"\n              checked={value || false}\n              onChange={handleCheckboxChange}\n              className=\"checkbox-input\"\n            />\n            <span className=\"checkbox-text\">Yes</span>\n          </label>\n        );\n\n      case 'multiselect':\n        return (\n          <div className=\"checkbox-group\">\n            {question.options?.map((option, index) => (\n              <label key={index} className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  value={option}\n                  checked={Array.isArray(value) && value.includes(option)}\n                  onChange={handleCheckboxChange}\n                  className=\"checkbox-input\"\n                />\n                <span className=\"checkbox-text\">{option}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      case 'file':\n        return (\n          <input\n            type=\"file\"\n            onChange={handleFileChange}\n            accept={question.accept}\n            multiple={question.multiple}\n            className={`form-file ${error ? 'error' : ''}`}\n          />\n        );\n\n      case 'rating':\n      case 'scale':\n        const max = question.validation?.max || 5;\n        return (\n          <div className=\"rating-group\">\n            {Array.from({ length: max }, (_, i) => i + 1).map(num => (\n              <label key={num} className=\"rating-label\">\n                <input\n                  type=\"radio\"\n                  name={question.id}\n                  value={num}\n                  checked={parseInt(value) === num}\n                  onChange={handleInputChange}\n                  className=\"rating-input\"\n                />\n                <span className=\"rating-text\">{num}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      default:\n        return (\n          <input\n            type=\"text\"\n            value={value || ''}\n            onChange={handleInputChange}\n            placeholder={question.placeholder}\n            className={`form-input ${error ? 'error' : ''}`}\n            required={question.required}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className={`question-renderer ${error ? 'has-error' : ''}`}>\n      {renderInput()}\n      {error && (\n        <div className=\"error-message\">\n          {error.message}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionRenderer;\n"],"names":["EmployeeAssessment","_state$questions$Empl6","companyId","employeeId","useParams","navigate","useNavigate","state","startAssessment","loadQuestions","updateResponse","saveAssessment","useAssessment","currentQuestionIndex","setCurrentQuestionIndex","useState","responses","setResponses","validationErrors","setValidationErrors","isSaving","setIsSaving","lastSaved","setLastSaved","isSubmitting","setIsSubmitting","showValidationSummary","setShowValidationSummary","apiService","getApiService","useEffect","interval","setInterval","Object","keys","length","handleAutoSave","clearInterval","loadPreviousResponses","async","savedResponses","getResponse","_state$questions$Empl","firstUnanswered","questions","Employee","findIndex","q","id","error","console","useCallback","saveResponse","assessmentType","Date","handleQuestionResponse","questionId","value","prev","_objectSpread","filter","field","validateAllQuestions","_state$questions$Empl2","errors","forEach","question","validateQuestion","_question$validation","_question$validation2","_question$validation3","_question$validation4","required","undefined","message","code","type","validation","minLength","concat","maxLength","test","numValue","Number","isNaN","min","max","push","progress","calculateProgress","_state$questions$Empl4","_state$questions$Empl5","totalQuestions","answeredQuestions","completed","total","percentage","Math","round","currentQuestion","currentValue","currentError","find","loading","_jsx","className","children","LoadingSpinner","size","_jsxs","ProgressBar","showDetails","SaveIndicator","onClick","map","index","title","category","description","QuestionRenderer","onChange","onFileUpload","files","uploadedFiles","uploadFiles","handlePreviousQuestion","disabled","handleNextQuestion","_state$questions$Empl3","toLocaleTimeString","_ref","formatLastSaved","timestamp","now","saved","diffMs","diffSeconds","floor","diffMinutes","diffHours","toLocaleDateString","hour","minute","style","width","transition","handleInputChange","e","newValue","target","handleFileChange","handleCheckboxChange","currentValues","Array","isArray","optionValue","checked","v","renderInput","_question$options","_question$options2","_question$options3","placeholder","rows","options","option","name","includes","accept","multiple","from","_","i","num","parseInt"],"sourceRoot":""}