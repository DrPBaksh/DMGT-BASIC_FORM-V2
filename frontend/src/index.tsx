import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { checkBrowserCompatibility, getEnvironmentConfig } from './utils/config';\n\n// Check browser compatibility on startup\nif (!checkBrowserCompatibility()) {\n  alert('Your browser may not be fully compatible with this application. Please use a modern browser for the best experience.');\n}\n\n// Get environment configuration\nconst envConfig = getEnvironmentConfig();\n\n// Enable React strict mode in development\nconst StrictModeWrapper = envConfig.isDevelopment ? React.StrictMode : React.Fragment;\n\n// Get the root element\nconst rootElement = document.getElementById('root');\n\nif (!rootElement) {\n  throw new Error('Root element not found. Please check your HTML template.');\n}\n\n// Create React root\nconst root = ReactDOM.createRoot(rootElement);\n\n// Performance monitoring\nif (envConfig.enablePerformanceTracking) {\n  if ('performance' in window && 'mark' in window.performance) {\n    window.performance.mark('react-render-start');\n  }\n}\n\n// Render the application\nroot.render(\n  <StrictModeWrapper>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictModeWrapper>\n);\n\n// Performance monitoring completion\nif (envConfig.enablePerformanceTracking) {\n  setTimeout(() => {\n    if ('performance' in window && 'mark' in window.performance) {\n      window.performance.mark('react-render-complete');\n      \n      // Measure rendering time\n      try {\n        window.performance.measure('react-render-time', 'react-render-start', 'react-render-complete');\n        const renderMeasure = window.performance.getEntriesByName('react-render-time')[0];\n        if (renderMeasure && envConfig.enableDebugLogging) {\n          console.log(`React render time: ${renderMeasure.duration.toFixed(2)}ms`);\n        }\n      } catch (error) {\n        console.warn('Performance measurement failed:', error);\n      }\n    }\n  }, 0);\n}\n\n// Enable hot module replacement in development\nif (envConfig.isDevelopment && module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default;\n    root.render(\n      <StrictModeWrapper>\n        <BrowserRouter>\n          <NextApp />\n        </BrowserRouter>\n      </StrictModeWrapper>\n    );\n  });\n}\n\n// Global error boundary for unhandled React errors\nif (envConfig.enableErrorTracking) {\n  window.addEventListener('error', (event) => {\n    console.error('React Error:', {\n      message: event.message,\n      filename: event.filename,\n      lineno: event.lineno,\n      colno: event.colno,\n      error: event.error\n    });\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled Promise Rejection:', event.reason);\n  });\n}\n\n// Report web vitals in production\nif (envConfig.isProduction) {\n  import('./utils/reportWebVitals').then(({ default: reportWebVitals }) => {\n    reportWebVitals(console.log);\n  }).catch(() => {\n    // Silently fail if web vitals reporting is not available\n  });\n}\n\n// Accessibility announcements for screen readers\nif ('speechSynthesis' in window) {\n  // Announce when the app is ready\n  setTimeout(() => {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.className = 'sr-only';\n    announcement.textContent = 'DMGT Assessment Platform loaded successfully';\n    document.body.appendChild(announcement);\n    \n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 3000);\n  }, 2000);\n}"