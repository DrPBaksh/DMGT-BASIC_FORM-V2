/**
 * Enhanced Configuration Service for DMGT Basic Form V2
 * Dynamic configuration management with environment-specific settings
 * Integrates with the deploy script's .env generation
 */

class ConfigurationService {
  constructor() {
    this.config = this.loadConfiguration();
    this.validateConfiguration();
  }

  /**
   * Get singleton instance
   */
  static getInstance() {
    if (!ConfigurationService.instance) {
      ConfigurationService.instance = new ConfigurationService();
    }
    return ConfigurationService.instance;
  }

  /**
   * Load configuration from environment variables
   */
  loadConfiguration() {
    const env = process.env;
    
    // Environment detection
    const environment = env.REACT_APP_ENVIRONMENT || env.NODE_ENV || 'development';
    const isDevelopment = environment === 'development';
    const isProduction = environment === 'production';
    
    // AWS Region
    const awsRegion = env.REACT_APP_AWS_REGION || env.REACT_APP_AwsRegion || 'eu-west-2';
    
    // API URLs (dynamically generated by deploy script)
    const apiGatewayUrl = env.REACT_APP_API_URL || env.REACT_APP_ApiGatewayUrl || '';
    const getQuestionsApiUrl = env.REACT_APP_GetQuestionsApiUrl || `${apiGatewayUrl}/questions`;
    const saveResponseApiUrl = env.REACT_APP_SaveResponseApiUrl || `${apiGatewayUrl}/responses`;
    const fileUploadApiUrl = env.REACT_APP_FileUploadApiUrl || `${apiGatewayUrl}/files`;
    
    // S3 Buckets (dynamically generated by deploy script)
    const websiteBucket = env.REACT_APP_WEBSITE_BUCKET || env.REACT_APP_WebsiteBucket || '';
    const configBucket = env.REACT_APP_CONFIG_BUCKET || env.REACT_APP_ConfigBucket || '';
    const responsesBucket = env.REACT_APP_ResponsesBucket || '';
    const filesBucket = env.REACT_APP_FilesBucket || '';
    
    // CloudFront (dynamically generated by deploy script)
    const cloudFrontUrl = env.REACT_APP_CLOUDFRONT_URL || env.REACT_APP_CloudFrontUrl || '';
    const cloudFrontDistribution = env.REACT_APP_CloudFrontDistribution || '';
    
    // File upload configuration
    const maxFileSize = 10 * 1024 * 1024; // 10MB
    const supportedFileTypes = [
      'image/jpeg', 'image/png', 'image/gif', 'image/webp',
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'application/vnd.ms-powerpoint',
      'application/vnd.openxmlformats-officedocument.presentationml.presentation',
      'text/plain', 'text/csv'
    ];
    
    return {
      // Environment
      environment,
      isDevelopment,
      isProduction,
      
      // AWS Configuration
      awsRegion,
      
      // API Endpoints
      apiBaseUrl: apiGatewayUrl,
      apiGatewayUrl,
      getQuestionsApiUrl,
      saveResponseApiUrl,
      fileUploadApiUrl,
      
      // S3 Buckets
      websiteBucket,
      configBucket,
      responsesBucket,
      filesBucket,
      
      // CloudFront
      cloudFrontUrl,
      cloudFrontDistribution,
      
      // Application Settings
      appName: 'DMGT Data & AI Readiness Assessment',
      appVersion: env.REACT_APP_VERSION || '2.1.0',
      maxFileSize,
      supportedFileTypes,
      autoSaveInterval: 30000, // 30 seconds
      requestTimeout: 30000, // 30 seconds
      maxRetries: 3,
      
      // Feature Flags
      features: {
        fileUpload: true,
        autoSave: true,
        progressTracking: true,
        offlineMode: false,
        analytics: isProduction
      },
      
      // UI Configuration
      ui: {
        theme: 'professional',
        primaryColor: '#007AFF',
        animationDuration: 300,
        pageTransitionDelay: 150
      }
    };
  }

  /**
   * Validate critical configuration values
   */
  validateConfiguration() {
    const errors = [];
    
    // Validate required API URL
    if (!this.config.apiGatewayUrl) {
      errors.push('API Gateway URL is not configured');
    }
    
    // Validate AWS region
    if (!this.config.awsRegion) {
      errors.push('AWS region is not configured');
    }
    
    // Validate environment
    if (!['development', 'production', 'dev', 'prod'].includes(this.config.environment)) {
      console.warn(`Unknown environment: ${this.config.environment}`);
    }
    
    if (errors.length > 0) {
      console.error('Configuration validation failed:', errors);
      throw new Error(`Configuration errors: ${errors.join(', ')}`);
    }
    
    console.log('âœ… Configuration validated successfully');
    if (this.config.isDevelopment) {
      console.log('ðŸ”§ Configuration:', this.getPublicConfig());
    }
  }

  /**
   * Get the complete configuration
   */
  getConfig() {
    return { ...this.config };
  }

  /**
   * Get API configuration
   */
  getApiConfig() {
    return {
      baseUrl: this.config.apiBaseUrl,
      timeout: this.config.requestTimeout,
      maxRetries: this.config.maxRetries,
      endpoints: {
        questions: this.config.getQuestionsApiUrl,
        responses: this.config.saveResponseApiUrl,
        files: this.config.fileUploadApiUrl
      }
    };
  }

  /**
   * Get AWS configuration
   */
  getAwsConfig() {
    return {
      region: this.config.awsRegion,
      buckets: {
        website: this.config.websiteBucket,
        config: this.config.configBucket,
        responses: this.config.responsesBucket,
        files: this.config.filesBucket
      },
      cloudFront: {
        url: this.config.cloudFrontUrl,
        distributionId: this.config.cloudFrontDistribution
      }
    };
  }

  /**
   * Get file upload configuration
   */
  getFileUploadConfig() {
    return {
      maxSize: this.config.maxFileSize,
      supportedTypes: [...this.config.supportedFileTypes],
      endpoint: this.config.fileUploadApiUrl
    };
  }

  /**
   * Get feature flags
   */
  getFeatures() {
    return { ...this.config.features };
  }

  /**
   * Get UI configuration
   */
  getUiConfig() {
    return { ...this.config.ui };
  }

  /**
   * Check if a feature is enabled
   */
  isFeatureEnabled(feature) {
    return this.config.features[feature];
  }

  /**
   * Get environment-specific settings
   */
  getEnvironmentConfig() {
    return {
      environment: this.config.environment,
      isDevelopment: this.config.isDevelopment,
      isProduction: this.config.isProduction,
      debugMode: this.config.isDevelopment,
      logLevel: this.config.isDevelopment ? 'debug' : 'error'
    };
  }

  /**
   * Get public configuration (safe to log)
   */
  getPublicConfig() {
    return {
      environment: this.config.environment,
      awsRegion: this.config.awsRegion,
      appName: this.config.appName,
      appVersion: this.config.appVersion,
      features: this.config.features,
      ui: this.config.ui,
      hasApiUrl: Boolean(this.config.apiGatewayUrl),
      hasCloudFrontUrl: Boolean(this.config.cloudFrontUrl)
    };
  }

  /**
   * Update configuration at runtime (for testing/debugging)
   */
  updateConfig(updates) {
    if (this.config.isDevelopment) {
      this.config = { ...this.config, ...updates };
      console.log('ðŸ”„ Configuration updated:', updates);
    } else {
      console.warn('Configuration updates are only allowed in development mode');
    }
  }

  /**
   * Get formatted file size limit
   */
  getFormattedMaxFileSize() {
    const sizeInMB = this.config.maxFileSize / (1024 * 1024);
    return `${sizeInMB}MB`;
  }

  /**
   * Get formatted supported file types
   */
  getFormattedSupportedFileTypes() {
    return this.config.supportedFileTypes
      .map(type => type.split('/')[1]?.toUpperCase())
      .filter(Boolean)
      .join(', ');
  }

  /**
   * Check if current environment is development
   */
  isDev() {
    return this.config.isDevelopment;
  }

  /**
   * Check if current environment is production
   */
  isProd() {
    return this.config.isProduction;
  }

  /**
   * Get application metadata
   */
  getAppMetadata() {
    return {
      name: this.config.appName,
      version: this.config.appVersion,
      environment: this.config.environment,
      buildDate: process.env.REACT_APP_BUILD_DATE || new Date().toISOString(),
      commitHash: process.env.REACT_APP_COMMIT_HASH || 'unknown'
    };
  }
}

// Export singleton instance
export const config = ConfigurationService.getInstance();

// Export configuration hooks for React components
export const useConfig = () => config.getConfig();
export const useApiConfig = () => config.getApiConfig();
export const useAwsConfig = () => config.getAwsConfig();
export const useFeatures = () => config.getFeatures();
export const useUiConfig = () => config.getUiConfig();

// Export specific configuration getters
export const getApiBaseUrl = () => config.getApiConfig().baseUrl;
export const getAwsRegion = () => config.getAwsConfig().region;
export const isFeatureEnabled = (feature) => config.isFeatureEnabled(feature);
export const isDevelopment = () => config.isDev();
export const isProduction = () => config.isProd();

// Export for debugging
export const debugConfig = () => {
  if (config.isDev()) {
    console.table(config.getPublicConfig());
  }
};

export default config;
